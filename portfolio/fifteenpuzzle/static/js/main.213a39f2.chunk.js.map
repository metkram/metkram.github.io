{"version":3,"sources":["Tile.js","Board.js","index.js"],"names":["Tile","props","className","value","Board","tiles","map","tile","number","onMouseDown","handleClick","Game","useState","newTilesSet","setTiles","steps","setSteps","Date","now","gameStarted","setGameStarted","getGameTime","gameElapsed","setGameElapsed","isSolved","setIsSolved","newGame","i","length","randomIndex","Math","floor","random","set","result","newSet","slice","reverse","isSolvable","push","useEffect","sessionStorage","getItem","state","JSON","parse","setItem","stringify","saveData","timer","setInterval","clearInterval","numberSet","zeroPosition","indexOf","numberPosition","zero","filter","includes","join","checkWin","changePosition","onClick","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.213a39f2.chunk.js","sourcesContent":["function Tile(props) {\n  return(\n    <p className={\"number\"}>{props.value}</p>\n  );\n}\n\nexport default Tile;\n","import Tile from \"./Tile\";\n\nfunction Board(props) {\n  function createTile(number) {\n    return(\n      <Tile value={number} />\n    );\n  }\n\n  function fillBoard(tiles) {\n    return tiles.map(tile => {\n      const tileClasses = \"tile noselect\";\n      const zeroTileClasses = \"zerotile noselect\";\n      return <div key={tile} className={tile == 0 ? zeroTileClasses : tileClasses}onMouseDown={() => props.handleClick(tile)}>\n               {createTile(tile)}\n             </div>;\n    });\n  }\n\n  return (\n    <div>\n      {fillBoard(props.tiles)}\n    </div>\n  );\n}\n\nexport default Board;\n","import React, {useState, useEffect} from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Board from \"./Board\";\nimport \"materialize-css/dist/css/materialize.min.css\";\nimport M from \"materialize-css\";\nimport './index.css';\n\n\nfunction Game(props) {\n  const [tiles, setTiles] = useState(newTilesSet());\n  const [steps, setSteps] = useState(0);\n  const [gameStarted, setGameStarted] = useState(Date.now());\n  const [gameElapsed, setGameElapsed] = useState(getGameTime());\n  const [isSolved, setIsSolved] = useState(false);\n\n  useEffect(() => {\n    if (sessionStorage.getItem(\"state\")) {\n      const state = JSON.parse(sessionStorage.getItem(\"state\"));\n      setTiles(state.tiles);\n      setSteps(state.steps);\n      setGameStarted(state.gameStarted);\n      setIsSolved(state.isSolved);\n    } else {\n      newGame();\n    }\n  }, []);\n\n  useEffect(() => {\n    saveData();\n  }, [tiles, steps, isSolved]);\n\n  useEffect(() => {\n      const timer = setInterval(() => {setGameElapsed(getGameTime())}, 1000);\n      return () => clearInterval(timer);\n  });\n\n  function newGame() {\n    setTiles(newTilesSet());\n    setSteps(0);\n    setGameStarted(Date.now());\n    setIsSolved(false);\n  }\n\n  function newTilesSet() {\n    const tiles = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15];\n\n    for (let i = 0; i < tiles.length; i++) {\n      const randomIndex = Math.floor(Math.random() * tiles.length);\n      [tiles[i], tiles[randomIndex]] = [tiles[randomIndex], tiles[i]];\n    }\n\n    if (isSolvable(tiles)) {\n      tiles.push(0);\n      return tiles;\n    } else {\n      return newTilesSet();\n    }\n  }\n\n  function isSolvable(set) {\n    let result = 0;\n    let newSet = [...set.slice(0, 4), ...set.slice(4, 8).reverse(), ...set.slice(8, 12), ...set.slice(12).reverse()];\n    for (let i = 1; i < newSet.length; i++) {\n      if (set[i] < set[i - 1]) result++;\n    }\n    return (result % 2) == 0;\n  }\n\n  function handleClick(i) {\n    changePosition(i);\n  }\n\n  function saveData() {\n    const state = {\n      \"tiles\": tiles,\n      \"gameStarted\": gameStarted,\n      \"steps\": steps,\n      \"isSolved\": isSolved,\n    };\n    sessionStorage.setItem(\"state\", JSON.stringify(state));\n  }\n\n  function changePosition(number) {\n    const numberSet = tiles.slice();\n    const zeroPosition = numberSet.indexOf(0);\n    const numberPosition = numberSet.indexOf(number);\n\n    if (possibleMoves(zeroPosition).includes(numberPosition)) {\n      [numberSet[zeroPosition], numberSet[numberPosition]] = [numberSet[numberPosition], numberSet[zeroPosition]];\n      setTiles(numberSet);\n      setSteps(steps + 1);\n      setGameElapsed(getGameTime());\n    }\n    if (checkWin(numberSet)) {\n      setIsSolved(true);\n    }\n  }\n\n  function possibleMoves(zero) {\n    const set = [\n      zero - 4,\n      (zero == 3 || zero == 7 || zero == 11) ? -1 : zero + 1,\n      zero + 4,\n      (zero == 4 || zero == 8 || zero == 12) ? -1 : zero - 1,\n    ];\n\n    return set.filter(number => number >= 0 && number <= 15);\n  }\n\n  function checkWin(numberSet) {\n    const winSet = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 0].join();\n    return winSet == numberSet.join();\n  }\n\n  function getGameTime() {\n    return Math.floor((Date.now() - gameStarted)/1000);\n  }\n\n  return(\n    <div className={\"board\"}>\n      <div className={\"info\"}>\n        {isSolved ? \"You win\" : `Moves: ${steps} Time: ${gameElapsed} seconds`}\n      </div>\n      <div className={\"tiles\"}>\n        <Board tiles={tiles} handleClick={handleClick} />\n      </div>\n      <div className={\"buttons\"}>\n        <button className={\"btn waves-effect waves-light\"} onClick={() => newGame()}>\n          New game\n        </button>\n        <a className=\"waves-effect waves-light btn\" href=\"/\">go home</a>\n        <a className=\"waves-effect waves-light btn\" href=\"https://github.com/metkram/reactjs-fifteen-puzzle\">github repo</a>\n      </div>\n    </div>\n  );\n\n}\n\nReactDOM.render(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}